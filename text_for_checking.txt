

void UShipMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) 
{ 
    Super::TickComponent(DeltaTime, TickType, ThisTickFunction); 
    if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime)) 
    {
        return; 
    } 
    if (CheckState(EShipMovementState::Accelerating))
    {
        if (CurrentSpeed < CurrentMaxSpeed) 
        { 
            CurrentSpeed += Acceleration;
	    AccelerationPath += CurrentSpeed * DeltaTime; 
        }
        else 
        {
            CurrentSpeed = CurrentMaxSpeed;
            RemoveState(EShipMovementState::Accelerating); 
        } 
    }
    else if (CheckState(EShipMovementState::Braking)) 
    {
        if (CurrentSpeed > 0.0f)
        {
            CurrentSpeed -= Acceleration;
            DeaccelerationPath += CurrentSpeed * DeltaTime; 
        }
        else
        {
            CurrentSpeed = 0.0f; 
            CurrentMaxSpeed = MaxSpeed;
            RemoveState(EShipMovementState::Braking);
            RemoveState(EShipMovementState::Moving); 
        } 
    } 
    else if (CheckState(EShipMovementState::SpeedDecreasing)) 
    {
        if (CurrentSpeed > CurrentMaxSpeed) 
        {
            CurrentSpeed -= Acceleration; DeaccelerationPath += CurrentSpeed * DeltaTime; 
        } else { CurrentSpeed = CurrentMaxSpeed; RemoveState(EShipMovementState::SpeedDecreasing);
        }
    }
    if (CheckState(EShipMovementState::Moving) || CheckState(EShipMovementState::Turning))
    {
        MoveForwardWithCurrentSpeed(DeltaTime);
    }
}

void UShipMovementComponent::MoveForwardWithCurrentSpeed(float DeltaTime) 
{ 
    Velocity = UpdatedComponent->GetForwardVector() * CurrentSpeed * DeltaTime; 
    MoveUpdatedComponent(Velocity, AcceptedRotator, false); UpdateComponentVelocity(); 
}